1. Применение паттерна Singleton
Задача: применить паттерн «Одиночка» для логирования событий в проекте SBomber (рефакторинг модуля MyTools.cpp).
В единице трансляции MyTools.cpp есть вторая группа функций (помимо функций для работы с экраном) для логирования событий в проекте SBomber. Рассмотрим их прототипы:

void __fastcall OpenLogFile(const std::string& FN);
void CloseLogFile();
void __fastcall WriteToLog(const std::string& str);
void __fastcall WriteToLog(const std::string& str, int n);
void __fastcall WriteToLog(const std::string& str, double d);

Видим функции, которые открывают и закрывают файл для ведения лога, и 3 функции для записи данных в лог-файл.
Необходимо выполнить рефакторинг этих функций и поместить их внутрь «Одиночки» (FileLoggerSingletone) по аналогии с тем, как это было сделано выше для объекта-одиночки ScreenSingletone. Так мы сможем использовать эту функциональность в стиле ООП.

2. (*) Применение паттерна «Заместитель»
Задача: использовать паттерн «Заместитель» в проекте SBomber в алгоритмах логирования.
Используйте структурный паттерн «Заместитель» в проекте SBomber в качестве обёртки для процедуры логирования в файл через FileLoggerSingletone. Пусть в начало строки логирования обёртка добавляет номер логируемого события, начиная с 1. Дайте название LoggerSingleton — его тоже можно сделать «Одиночкой». Возможно, в будущем мы захотим управлять записью логов в файл, по сети или в БД. Тогда мы быстро усовершенствуем LoggerSingleton: добавим другие виды логирования и возможность переключения между ними. Остальной код, который пользуется этим классом, трогать не придётся.
